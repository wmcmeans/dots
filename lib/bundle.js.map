{"version":3,"sources":["webpack/bootstrap ffb8f637a273baf8842f","./lib/main.js","./lib/dots-view.js","./lib/board.js","./lib/game.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACLD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,iBAAiB;;AAElC;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;;AAEA;AACA;AACA;AACA,MAAK,YAAY;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACxTA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAmB,OAAO;AAC1B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB,OAAO;AACxB;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,yBAAwB,OAAO;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC5NA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/lib/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ffb8f637a273baf8842f\n **/","var DotsView = require('./dots-view');\n\n$(function () {\n  var rootEl = $('.dots-game');\n  new DotsView(rootEl);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/main.js\n ** module id = 0\n ** module chunks = 0\n **/","var Board = require('./board.js');\nvar Game = require('./game.js');\n\nvar View = function ($el) {\n  this.$el = $el;\n\n  this.renderMenu();\n};\n\nView.prototype.newGame = function (event) {\n  this.board = new Board();\n  this.game = new Game(this.board);\n\n  this.newHighScore = false;\n\n  this.renderGame();\n};\n\nView.prototype.renderGame = function (event) {\n  this.setupScoreBoard();\n  this.setupGrid();\n  this.render();\n\n  $('.dots-game').on(\"mousedown touchstart\", this.beginMove.bind(this));\n  $(window).on(\"mouseup touchend\", this.endMove.bind(this));\n  $('.directions-link').click(this.renderMenu.bind(this));\n};\n\nView.prototype.beginMove = function (event) {\n  event.preventDefault();\n  if (event.target.classList[0] !== \"spot\") {\n    return;\n  }\n\n  var dotPos = [event.target.id[0], event.target.id[2]];\n  var board = this.board;\n  var game = this.game;\n\n  game.beginMove(dotPos);\n  $(event.target).addClass('active');\n\n  $('div.' + this.game.selectedColor).on(\"mouseenter touchenter\", function(e) {\n    var newPos = [parseInt(e.target.id[0]), parseInt(e.target.id[2])];\n\n    if (game.addSpotToSelection(newPos)) {\n      activateHTMLConnection();\n      $(e.target).addClass('active');\n\n      if (board.selectionTail().isSquared()) {\n        $('div.' + board.selectedColor()).addClass('squared');\n      }\n    }\n\n  });\n\n  $('div.' + this.game.selectedColor).on(\"mouseleave touchleave\", function(e) {\n    var exitEdge = closestEdge(e);\n\n    if (exitEdge === board.lastEntryPoint()) {\n      game.revertSelection();\n      updateHTMLConnections();\n\n      $(e.target).removeClass('active');\n      if (!board.anySquares()) {\n        $('div.' + board.selectedColor()).removeClass('squared');\n      }\n    }\n  });\n\n  function activateHTMLConnection() {\n    var dots = game.board.newestConnection();\n\n    updateConnectionClass(dots);\n  }\n\n  function updateConnectionClass(dots) {\n    var htmlId = getPossibleHTMLIds(dots);\n\n    $('li#' + htmlId[0] + \"to\" + htmlId[1]).addClass('active ' + board.selectedColor());\n    $('li#' + htmlId[1] + \"to\" + htmlId[0]).addClass('active ' + board.selectedColor());\n  }\n\n  function updateHTMLConnections() {\n    $('li').removeClass('active ' + board.selectedColor());\n\n    for (var i = 0; i < board.selectedDots.length - 1; i++) {\n      var dots = [board.selectedDots[i], board.selectedDots[i + 1]];\n      updateConnectionClass(dots);\n    }\n  }\n\n  function getPossibleHTMLIds(dots) {\n    var dot1 = dots[0];\n    var dot2 = dots[1];\n    return [\n      dot1.pos[0] + \"-\" + dot1.pos[1],\n      dot2.pos[0] + \"-\" + dot2.pos[1]\n    ];\n  }\n\n  function getOppositeEntry(location) {\n    switch (location) {\n      case \"top\":\n        return \"bottom\";\n      case \"right\":\n        return \"left\";\n      case \"bottom\":\n        return \"top\";\n      case \"left\":\n        return \"right\";\n    }\n  }\n};\n\nView.prototype.endMove = function (event) {\n  $('div.spot').unbind();\n  $('li.connection').attr('class', 'connection');\n  this.game.scoreDots();\n  this.render();\n  if (this.game.over()) {\n    this.setHighScore();\n    $(\".dots-game\").unbind();\n    $(window).unbind(\"mouseup\");\n    this.renderMenu();\n  }\n};\n\nView.prototype.render = function () {\n  this.updateScore();\n  this.updateSpots();\n  this.renderSpotDrops();\n};\n\nView.prototype.setHighScore = function () {\n  var highScore = localStorage.getItem('dotsHighScore');\n  if (this.game.score > highScore) {\n    localStorage.setItem('dotsHighScore', this.game.score);\n    this.newHighScore = true;\n  }\n};\n\nView.prototype.updateSpots = function () {\n  var grid = this.board.grid;\n  for (var i = 0; i < grid.length; i++) {\n\n    var column = grid[i];\n    for (var j = 0; j < 6; j++) {\n      var spot = column[j];\n      var spotX = spot.pos[0];\n      var spotY = spot.pos[1];\n\n    }\n  }\n\n  this.board.grid.forEach(function (column, x) {\n    column.forEach(function (spot, y) {\n      var spotX = spot.pos[0];\n      var spotY = spot.pos[1];\n      var spotNode = this.$spot.filter(\"#\" + spotX + \"-\" + spotY);\n      if (!spotNode.hasClass(spot.color)) {\n        spotNode.before(\"<li class='position empty-node'></li>\");\n      }\n      spotNode.attr(\"class\", \"spot \" + spot.color);\n    }.bind(this));\n  }.bind(this));\n};\n\nView.prototype.renderSpotDrops = function () {\n  var emptyNodes = $('li.empty-node');\n  emptyNodes.animate(\n    { height: 0 },\n    100,\n    \"linear\",\n    function () {\n      $(this).remove();\n    }\n  );\n};\n\nView.prototype.getDirectionsHTML = function () {\n  var html = \"<section class='game-menu'>\"+\n                \"<h3>Directions</h3>\" +\n                \"<p>Connect the dots of the same color to score points.</p>\" +\n                \"<p>Form rectangles to collect all dots of the same color.</p>\";\n      if (!this.game) {\n        html += \"<button class='game-button new-game'>New Game</button>\";\n      } else {\n        html += \"<button class='game-button back-to-game'>Back to Game</button>\";\n      }\n      html += \"</section>\";\n  return html;\n};\n\nView.prototype.getGameOverHTML = function () {\n  var html = \"<section class='game-menu'>\"+\n                \"<h3>Game Over</h3>\";\n  if (this.newHighScore) {\n    html  += \"<p>Congratulations! You scored a new personal high score.</p>\" +\n             \"<p>New high score: \" + this.game.score + \"</p>\";\n  } else {\n    html  += \"<p>You scored \" + this.game.score + \" points.</p>\" +\n             \"<p>Your high score is \" + localStorage.getItem('dotsHighScore') + \".</p>\";\n  }\n    html  += \"<button class='game-button new-game'>New Game</button>\" +\n             \"</section>\";\n  return html;\n};\n\nView.prototype.updateScore = function () {\n  this.$moves.html(\"Moves Left: \" + this.game.moves);\n  this.$score.html(\"Score: \" + this.game.score);\n};\n\nView.prototype.renderMenu = function () {\n  var html;\n  if (this.game && this.game.over()) {\n    html = this.getGameOverHTML();\n  } else {\n    html = this.getDirectionsHTML();\n  }\n  this.$el.html(html);\n\n  $('button.new-game').click(this.newGame.bind(this));\n  $('button.back-to-game').click(this.renderGame.bind(this));\n};\n\nView.prototype.setupScoreBoard = function () {\n  var html  = \"<p><a class='directions-link'>Directions</a></p>\";\n      html +=  \"<h2 class='scoreboard group'>\";\n      html +=   \"<span class='moves-left'></span>\";\n      html +=   \"<span class='score'></span>\";\n      html += \"</h2>\";\n  this.$el.html(html);\n  this.$moves = this.$el.find('.moves-left');\n  this.$score = this.$el.find('.score');\n};\n\nView.prototype.setupGrid = function () {\n  var board = \"<figure class='game-board'>\";\n  var spots = \"<section class='spots-board group'>\";\n  var verticalConnections = \"<section class='connections-board vertical'>\";\n  var horizontalConnections = \"<section class='connections-board horizontal'>\";\n  for (var x = 0; x < 6; x++) {\n    spots += \"<ul id='\" + x + \"' class='column group'>\";\n    if (x < 5) {\n    }\n    verticalConnections += \"<ul class='vertical connections group'>\";\n    horizontalConnections += \"<ul class='horizontal connections group'>\";\n    for (var y = 0; y < 6; y++) {\n      spots += (\n        \"<li class='position'><div class='spot' id='\" + x + \"-\" + y + \"'></div></li>\"\n      );\n      if (y < 5) {\n        verticalConnections += (\n          \"<li class='connection' id='\" + x + \"-\" + y + \"to\" + x + \"-\" + (y + 1) + \"'></li>\"\n        );\n        horizontalConnections += (\n          \"<li class='connection' id='\" + y + \"-\" + x + \"to\" + (y + 1) + \"-\" + x + \"'></li>\"\n        );\n      }\n    }\n    spots += \"</ul>\";\n    horizontalConnections += \"</ul>\";\n    verticalConnections += \"</ul>\";\n  }\n  spots += \"</section>\";\n  horizontalConnections += \"</section>\";\n  verticalConnections += \"</section>\";\n  board += spots;\n  board += horizontalConnections;\n  board += verticalConnections;\n  board += \"</figure>\";\n\n  this.$el.append(board);\n  this.$spot = this.$el.find(\"div.spot\");\n  this.$connections = this.$el.find(\"li.connection\");\n};\n\nclosestEdge = function (event) {\n  return closestEdgeFromDimensions(\n    event.pageX - $(event.target).offset().left,\n    event.pageY - $(event.target).offset().top,\n    $(event.target).width(),\n    $(event.target).height()\n  );\n};\n\nclosestEdgeFromDimensions = function (x,y,w,h) {\n  var topEdgeDist = distMetric(x,y,w/2,0);\n  var bottomEdgeDist = distMetric(x,y,w/2,h);\n  var leftEdgeDist = distMetric(x,y,0,h/2);\n  var rightEdgeDist = distMetric(x,y,w,h/2);\n  var min = Math.min(topEdgeDist,bottomEdgeDist,leftEdgeDist,rightEdgeDist);\n\n  switch (min) {\n      case leftEdgeDist:\n          return \"left\";\n      case rightEdgeDist:\n          return \"right\";\n      case topEdgeDist:\n          return \"top\";\n      case bottomEdgeDist:\n          return \"bottom\";\n  }\n};\n\nvar distMetric = function (x,y,x2,y2) {\n  var xDiff = x - x2;\n  var yDiff = y - y2;\n  return (xDiff * xDiff) + (yDiff * yDiff);\n};\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/dots-view.js\n ** module id = 1\n ** module chunks = 0\n **/","var NEIGHBORS = {\n  top: [0, 1],\n  right: [1, 0],\n  bottom: [0, -1],\n  left: [-1, 0]\n};\n\nvar Dot = function (options) {\n  this.pos = options.pos;\n  this.color = options.color;\n  this.occupiedEntries = {};\n  this.isHead = false;\n};\n\nDot.prototype.canConnectWith = function (otherDot) {\n  var relativeLocation = this.findNeighbor(otherDot);\n  var sameColor = this.color === otherDot.color;\n\n  if (relativeLocation && sameColor) {\n    return !this.occupiedEntries[relativeLocation];\n  }\n};\n\nDot.prototype.findNeighbor = function (otherDot) {\n  for (var location in NEIGHBORS) {\n    var x = NEIGHBORS[location][0];\n    var y = NEIGHBORS[location][1];\n    if (this.pos[0] + x === otherDot.pos[0] && this.pos[1] + y === otherDot.pos[1]) {\n      return location;\n    }\n  }\n\n  return null;\n};\n\nDot.prototype.isSquared = function () {\n  var connections = 0;\n  for (var location in this.occupiedEntries) {\n    if (this.occupiedEntries[location]) {\n      connections++;\n    }\n  }\n\n  return (connections > 2 || connections === 2 && this.isHead);\n};\n\nvar Board = function () {\n  this.selectedDots = [];\n  this.setup();\n};\n\nBoard.colors = [\n  \"purple\",\n  \"green\",\n  \"blue\",\n  \"red\",\n  \"yellow\"\n];\n\nvar randomColor = function () {\n  var idx = Math.floor(Math.random() * 5);\n  return Board.colors[idx];\n};\n\nvar dotSort = function (dot1, dot2) {\n  if (dot1.pos[0] === dot2.pos[0]) {\n    // sort so that higher dot is removed first/doesn't disrupt other positions\n    if (dot1.pos[1] > dot2.pos[1]) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else if (dot1.pos[0] > dot2.pos[0]) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nBoard.prototype.formConnection = function (newSpot) {\n  var prevTail = this.selectionTail();\n  var exit = prevTail.findNeighbor(newSpot);\n  var entry = getOppositeEntry(exit);\n\n  prevTail.occupiedEntries[exit] = true;\n  newSpot.occupiedEntries[entry] = true;\n\n  this.selectedDots.push(newSpot);\n};\n\nBoard.prototype.removeLastConnection = function () {\n  if (this.selectedDots.length < 2) {\n    return;\n  }\n  var newestConnection = this.newestConnection();\n  var entry = newestConnection[1].findNeighbor(newestConnection[0]);\n  var exit = getOppositeEntry(entry);\n\n  newestConnection[1].occupiedEntries[entry] = false;\n  newestConnection[0].occupiedEntries[exit] = false;\n\n  this.selectedDots.pop();\n};\n\nBoard.prototype.newestConnection = function () {\n  if (this.selectedDots.length < 2) {\n    return;\n  }\n  var lastIdx = this.selectedDots.length - 1;\n  return [ this.selectedDots[lastIdx - 1], this.selectedDots[lastIdx] ];\n};\n\nBoard.prototype.lastEntryPoint = function () {\n  var lastConnection = this.newestConnection();\n  if (!lastConnection) {\n    return;\n  }\n  return lastConnection[1].findNeighbor(lastConnection[0]);\n};\n\nBoard.prototype.resetSelections = function () {\n  if (this.selectedDots[0]) {\n    this.selectedDots[0].isHead = false;\n  }\n  this.selectedDots.forEach(function (dot) {\n    dot.occupiedEntries = {};\n  });\n  this.selectedDots = [];\n};\n\nBoard.prototype.selectedColor = function () {\n  return this.selectedDots[0].color;\n};\n\nBoard.prototype.startConnection = function (headDot) {\n  this.selectedDots = [headDot];\n};\n\nBoard.prototype.selectionTail = function () {\n  return this.selectedDots[this.selectedDots.length - 1];\n};\n\nBoard.prototype.anySquares = function () {\n  var anySquare = this.selectedDots.find(function (dot) {\n    if (dot.isSquared()) {\n      return true;\n    }\n  });\n\n  return anySquare;\n};\n\nBoard.prototype.adjustForSquares = function () {\n  if (this.anySquares()) {\n    var selectedColor = this.selectedDots[0].color;\n\n    this.selectedDots = [];\n    for (var i = 0; i < 6; i++) {\n      for (var j = 0; j < 6; j++) {\n        if (this.grid[i][j].color === selectedColor) {\n          this.selectedDots.push(this.grid[i][j]);\n        }\n      }\n    }\n  }\n};\n\nBoard.prototype.setup = function () {\n  this.grid = [];\n\n  for (var x = 0; x < 6; x++) {\n    var column = [];\n    for (var y = 0; y < 6; y++) {\n      var dot = new Dot({\n        pos: [x, y],\n        color: randomColor()\n      });\n      column.push(dot);\n    }\n    this.grid.push(column);\n  }\n};\n\n\nBoard.prototype.update = function () {\n  var sortedDots = this.selectedDots.sort(dotSort);\n\n  this.selectedDots.forEach(function (dot) {\n    var dotColumn = dot.pos[0];\n    var dotRow = dot.pos[1];\n\n    this.grid[dotColumn].splice(dotRow, 1);\n\n    for (var i = dotRow; i < 5; i++) {\n      this.grid[dotColumn][i].pos[1] = i;\n    }\n\n    this.grid[dotColumn].push(\n      new Dot({\n        pos: [dotColumn, i],\n        color: randomColor()\n      })\n    );\n\n  }.bind(this));\n};\n\nfunction getOppositeEntry(location) {\n  switch (location) {\n    case \"top\":\n      return \"bottom\";\n    case \"right\":\n      return \"left\";\n    case \"bottom\":\n      return \"top\";\n    case \"left\":\n      return \"right\";\n  }\n}\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/board.js\n ** module id = 2\n ** module chunks = 0\n **/","var Game = function (board, moves) {\n  this.board = board;\n  this.moves = moves || 30;\n  this.score = 0;\n\n};\n\nGame.prototype.scoreDots = function () {\n  if (this.board.selectedDots.length > 1) {\n    this.board.adjustForSquares();\n    this.score += this.board.selectedDots.length;\n    this.moves -= 1;\n    this.board.update();\n  }\n\n  this.board.resetSelections();\n};\n\nGame.prototype.clearMove = function () {\n  this.board.resetSelections();\n};\n\nGame.prototype.beginMove = function (spotPos) {\n  var startSpot = this.board.grid[spotPos[0]][spotPos[1]];\n\n  startSpot.isHead = true;\n  this.board.selectedDots = [startSpot];\n  this.selectedColor = startSpot.color;\n};\n\nGame.prototype.addSpotToSelection = function (spotPos) {\n  var prevDot = this.board.selectionTail();\n  if (spotPos[0] === prevDot.pos[0] && spotPos[1] === prevDot.pos[1]) {\n    return false;\n  }\n\n  var newDot = this.board.grid[spotPos[0]][spotPos[1]];\n  if (prevDot.canConnectWith(newDot)) {\n    this.board.formConnection(newDot);\n    return true;\n  }\n};\n\nGame.prototype.revertSelection = function () {\n  this.board.removeLastConnection();\n};\n\nGame.prototype.over = function () {\n  return this.moves <= 0;\n};\n\n\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}